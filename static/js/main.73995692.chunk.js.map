{"version":3,"sources":["components/Input.js","components/WeatherIcons.js","components/Results.js","App.js","reportWebVitals.js","index.js"],"names":["Input","checkResults","keyword","handleChange","onSubmit","className","type","name","value","text","onChange","e","placeholder","WeatherIcons","Results","weather","console","log","timeStamp","isDay","icon","includes","src","alt","sys","country","description","wind","speed","Date","getHours","getMinutes","main","humidity","pressure","Math","floor","temp","App","useState","setKeyword","updateWeather","a","preventDefault","Axios","get","catch","error","response","data","target","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.73995692.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nexport default function Input({ checkResults, keyword, handleChange }) {\r\n  return (\r\n    <form onSubmit={checkResults}>\r\n      <div className='row'>\r\n        <div className='col-md-8 col-8'>\r\n          <input\r\n            type='text'\r\n            name='query'\r\n            value={keyword.text}\r\n            onChange={(e) => handleChange(e)}\r\n            className='form-control w-80'\r\n            placeholder='Search your city'\r\n          />\r\n        </div>\r\n        <div className='col-md-4 col-4'>\r\n          <button className='btn btn-success'>search</button>\r\n        </div>\r\n      </div>\r\n    </form>\r\n  );\r\n}\r\n","export const WeatherIcons = {\r\n  \"01d\": \"/icons/sunny.svg\",\r\n  \"01n\": \"/icons/night.svg\",\r\n  \"02d\": \"/icons/day.svg\",\r\n  \"02n\": \"/icons/cloudy-night.svg\",\r\n  \"03d\": \"/icons/cloudy.svg\",\r\n  \"03n\": \"/icons/cloudy.svg\",\r\n  \"04d\": \"/icons/perfect-day.svg\",\r\n  \"04n\": \"/icons/cloudy-night.svg\",\r\n  \"09d\": \"/icons/rain.svg\",\r\n  \"09n\": \"/icons/rain-night.svg\",\r\n  \"10d\": \"/icons/rain.svg\",\r\n  \"10n\": \"/icons/rain-night.svg\",\r\n  \"11d\": \"/icons/storm.svg\",\r\n  \"11n\": \"/icons/storm.svg\",\r\n};\r\n","import React from \"react\";\r\nimport { WeatherIcons } from \"./WeatherIcons\";\r\n\r\nexport default function Results({ weather }) {\r\n  console.log(weather);\r\n  let isDay = weather?.weather[0].icon?.includes(\"d\");\r\n  const getTime = (timeStamp) => {\r\n    return `${new Date(timeStamp * 1000).getHours()} : ${new Date(\r\n      timeStamp * 1000\r\n    ).getMinutes()}`;\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {weather ? (\r\n        <div className='card'>\r\n          <img\r\n            className='card-img-top'\r\n            src={WeatherIcons[weather?.weather[0].icon]}\r\n            alt='icon'\r\n          />\r\n          <div className='card-body'>\r\n            <p>{isDay ? \"Day-time\" : \"Night-time\"}</p>\r\n            <p>Location: {`${weather?.name}, ${weather?.sys?.country}`}</p>\r\n            <p>Description: {weather?.weather[0].description}</p>\r\n            <p>Wind speed: {weather?.wind.speed}</p>\r\n            <p>\r\n              Timezone:{\" \"}\r\n              {`${getTime(weather?.sys[isDay ? \"sunset\" : \"sunrise\"])}`}\r\n            </p>\r\n            <p>Humidity: {weather?.main.humidity}</p>\r\n            <p>Pressure: {weather?.main.pressure}</p>\r\n\r\n            <p>Temperature: {`${Math.floor(weather?.main?.temp - 273)}Â°C`}</p>\r\n          </div>\r\n        </div>\r\n      ) : (\r\n        <h3>\r\n          Please search with the valied city name to get the weather details\r\n        </h3>\r\n      )}\r\n    </>\r\n  );\r\n}\r\n","import React, { useState } from \"react\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./App.css\";\nimport Input from \"./components/Input\";\nimport Results from \"./components/Results\";\nimport Axios from \"axios\";\n\nfunction App() {\n  const [keyword, setKeyword] = useState({\n    text: \"udupi\",\n  });\n\n  const [weather, updateWeather] = useState();\n\n  const handleChange = (e) => {\n    setKeyword({\n      text: e.target.value,\n    });\n  };\n  const checkResults = async (e) => {\n    e.preventDefault();\n    const response = await Axios.get(\n      `https://api.openweathermap.org/data/2.5/weather?q=${keyword.text}&appid=c43ac0ea7c06e811e4e7594d0b422c62`\n    ).catch((error) => {\n      return error;\n    });\n    updateWeather(response.data);\n  };\n  return (\n    <div className='App'>\n      <div className='container'>\n        <Input\n          checkResults={checkResults}\n          keyword={keyword}\n          handleChange={handleChange}\n        />\n        <Results weather={weather} />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}